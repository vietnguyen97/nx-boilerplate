const { execSync } = require("child_process");
const fs = require("fs");
const path = require("path");

// Danh s√°ch project c·∫ßn build
const projects = ["app1", "app2", "shared-utils"];

projects.forEach((project) => {
  try {
    // L·∫•y version t·ª´ package.json c·ªßa t·ª´ng project
    const packageJsonPath = path.join(__dirname, `./apps/${project}/package.json`);
    
    if (!fs.existsSync(packageJsonPath)) {
      console.warn(`‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y package.json cho ${project}, b·ªè qua.`);
      return;
    }

    const packageJson = require(packageJsonPath);
    const version = packageJson.version;

    if (!version) {
      console.warn(`‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y version trong package.json c·ªßa ${project}, b·ªè qua.`);
      return;
    }

    // T·∫°o th∆∞ m·ª•c l∆∞u build theo phi√™n b·∫£n
    const buildPath = path.join(__dirname, `../dist/${project}-${version}`);
    if (!fs.existsSync(buildPath)) {
      fs.mkdirSync(buildPath, { recursive: true });
    }

    // Ch·∫°y l·ªánh build
    console.log(`üöÄ Building ${project} version ${version}...`);
    execSync(`nx build ${project} --outputPath=${buildPath}`, { stdio: "inherit" });

    console.log(`‚úÖ Build ${project} ho√†n th√†nh! K·∫øt qu·∫£ t·∫°i: dist/${project}-${version}`);
  } catch (error) {
    console.error(`‚ùå L·ªói khi build ${project}:`, error.message);
  }
});
